"use strict";
(self["webpackChunkmoondunk2025"] = self["webpackChunkmoondunk2025"] || []).push([["vendors-node_modules_pnpm_nodecg_react-hooks_1_0_3__types_express_5_0_3_reflect-metadata_0_2_-e1691a"], {
"./node_modules/.pnpm/@nodecg+react-hooks@1.0.3_@types+express@5.0.3_reflect-metadata@0.2.2_typescript@5.6.2/node_modules/@nodecg/react-hooks/esm/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useListenFor: () => (/* reexport safe */ _use_listen_for__WEBPACK_IMPORTED_MODULE_1__.useListenFor),
  useReplicant: () => (/* reexport safe */ _use_replicant__WEBPACK_IMPORTED_MODULE_0__.useReplicant)
});
/* ESM import */var _use_replicant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/.pnpm/@nodecg+react-hooks@1.0.3_@types+express@5.0.3_reflect-metadata@0.2.2_typescript@5.6.2/node_modules/@nodecg/react-hooks/esm/use-replicant.js");
/* ESM import */var _use_listen_for__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/.pnpm/@nodecg+react-hooks@1.0.3_@types+express@5.0.3_reflect-metadata@0.2.2_typescript@5.6.2/node_modules/@nodecg/react-hooks/esm/use-listen-for.js");


//# sourceMappingURL=index.js.map

}),
"./node_modules/.pnpm/@nodecg+react-hooks@1.0.3_@types+express@5.0.3_reflect-metadata@0.2.2_typescript@5.6.2/node_modules/@nodecg/react-hooks/esm/use-listen-for.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useListenFor: () => (useListenFor)
});
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/.pnpm/react@18.2.0/node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);

const useListenFor = (messageName, handler, { bundle } = {}) => {
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
        if (bundle) {
            nodecg.listenFor(messageName, bundle, handler);
            return () => {
                nodecg.unlisten(messageName, bundle, handler);
            };
        }
        nodecg.listenFor(messageName, handler);
        return () => {
            nodecg.unlisten(messageName, handler);
        };
    }, [handler, messageName, bundle]);
};
//# sourceMappingURL=use-listen-for.js.map

}),
"./node_modules/.pnpm/@nodecg+react-hooks@1.0.3_@types+express@5.0.3_reflect-metadata@0.2.2_typescript@5.6.2/node_modules/@nodecg/react-hooks/esm/use-replicant.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useReplicant: () => (useReplicant)
});
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/.pnpm/react@18.2.0/node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var klona_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/.pnpm/klona@2.0.6/node_modules/klona/json/index.mjs");


/**
 * Subscribe to a replicant, returns tuple of the replicant value and `setValue` function.
 * The component using this function gets re-rendered when the value is updated.
 * The `setValue` function can be used to update replicant value.
 * @param replicantName The name of the replicant to use
 * @param initialValue Initial value to pass to `useState` function
 * @param options Options object. Currently supports the optional `namespace` option
 */
const useReplicant = (replicantName, { bundle, defaultValue, persistent } = {}) => {
    const replicant = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
        if (typeof bundle === "string") {
            return nodecg.Replicant(replicantName, bundle, {
                defaultValue,
                persistent,
            });
        }
        return nodecg.Replicant(replicantName, { defaultValue, persistent });
    }, [bundle, defaultValue, persistent, replicantName]);
    const [value, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(replicant.value);
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
        const changeHandler = (newValue) => {
            setValue((oldValue) => {
                if (newValue !== oldValue) {
                    return newValue;
                }
                return (0,klona_json__WEBPACK_IMPORTED_MODULE_1__.klona)(newValue);
            });
        };
        replicant.on("change", changeHandler);
        return () => {
            replicant.removeListener("change", changeHandler);
        };
    }, [replicant]);
    const updateValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((newValue) => {
        if (typeof newValue === "function") {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-call
            newValue(replicant.value);
        }
        else {
            replicant.value = newValue;
        }
    }, [replicant]);
    return [value, updateValue];
};
//# sourceMappingURL=use-replicant.js.map

}),
"./node_modules/.pnpm/@rspack+core@1.3.12_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js": (function (__unused_webpack_module, exports) {

var __nested_webpack_require_18_37__ = {};
__nested_webpack_require_18_37__.d = (exports1, definition)=>{
    for(var key in definition)__nested_webpack_require_18_37__.o(definition, key) && !__nested_webpack_require_18_37__.o(exports1, key) && Object.defineProperty(exports1, key, {
        enumerable: !0,
        get: definition[key]
    });
}, __nested_webpack_require_18_37__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop), __nested_webpack_require_18_37__.r = (exports1)=>{
    'undefined' != typeof Symbol && Symbol.toStringTag && Object.defineProperty(exports1, Symbol.toStringTag, {
        value: 'Module'
    }), Object.defineProperty(exports1, '__esModule', {
        value: !0
    });
};
var __nested_webpack_exports__ = {};
function normalizeUrl(url) {
    let urlString = url.trim();
    if (/^data:/i.test(urlString)) return urlString;
    let protocol = -1 !== urlString.indexOf("//") ? `${urlString.split("//")[0]}//` : "", components = urlString.replace(RegExp(protocol, "i"), "").split("/"), host = components[0].toLowerCase().replace(/\.$/, "");
    return components[0] = "", protocol + host + components.reduce((accumulator, item)=>{
        switch(item){
            case "..":
                accumulator.pop();
                break;
            case ".":
                break;
            default:
                accumulator.push(item);
        }
        return accumulator;
    }, []).join("/");
}
__nested_webpack_require_18_37__.r(__nested_webpack_exports__), __nested_webpack_require_18_37__.d(__nested_webpack_exports__, {
    cssReload: ()=>cssReload,
    normalizeUrl: ()=>normalizeUrl
});
let srcByModuleId = Object.create(null), noDocument = "undefined" == typeof document, { forEach } = Array.prototype;
function noop() {}
function updateCss(el, url) {
    let normalizedUrl;
    if (url) normalizedUrl = url;
    else {
        if (!el.href) return;
        normalizedUrl = el.href.split("?")[0];
    }
    if (!isUrlRequest(normalizedUrl) || !1 === el.isLoaded || !normalizedUrl || !(normalizedUrl.indexOf(".css") > -1)) return;
    el.visited = !0;
    let newEl = el.cloneNode();
    newEl.isLoaded = !1, newEl.addEventListener("load", ()=>{
        !newEl.isLoaded && (newEl.isLoaded = !0, el.parentNode && el.parentNode.removeChild(el));
    }), newEl.addEventListener("error", ()=>{
        !newEl.isLoaded && (newEl.isLoaded = !0, el.parentNode && el.parentNode.removeChild(el));
    }), newEl.href = `${normalizedUrl}?${Date.now()}`;
    let parent = el.parentNode;
    parent && (el.nextSibling ? parent.insertBefore(newEl, el.nextSibling) : parent.appendChild(newEl));
}
function reloadAll() {
    let elements = document.querySelectorAll("link");
    forEach.call(elements, (el)=>{
        !0 !== el.visited && updateCss(el);
    });
}
function isUrlRequest(url) {
    return !!/^[a-zA-Z][a-zA-Z\d+\-.]*:/.test(url);
}
function cssReload(moduleId, options) {
    var fn;
    let timeout;
    if (noDocument) return console.log("[HMR] No `window.document` found, CSS HMR disabled"), noop;
    let getScriptSrc = function(moduleId) {
        let src = srcByModuleId[moduleId];
        if (!src) {
            if (document.currentScript) ({ src } = document.currentScript);
            else {
                let scripts = document.getElementsByTagName("script"), lastScriptTag = scripts[scripts.length - 1];
                lastScriptTag && ({ src } = lastScriptTag);
            }
            srcByModuleId[moduleId] = src;
        }
        return (fileMap)=>{
            if (!src) return null;
            let splitResult = src.match(/([^\\/]+)\.js$/), filename = splitResult && splitResult[1];
            return filename && fileMap ? fileMap.split(",").map((mapRule)=>{
                let reg = RegExp(`${filename}\\.js$`, "g");
                return normalizeUrl(src.replace(reg, `${mapRule.replace(/{fileName}/g, filename)}.css`));
            }) : [
                src.replace(".js", ".css")
            ];
        };
    }(moduleId);
    return fn = function() {
        let src = getScriptSrc(options.filename), reloaded = function(src) {
            if (!src) return !1;
            let elements = document.querySelectorAll("link"), loaded = !1;
            return forEach.call(elements, (el)=>{
                if (!el.href) return;
                let url = function(href, src) {
                    let ret = "", normalizedHref = normalizeUrl(href);
                    return src.some((url)=>{
                        normalizedHref.indexOf(src) > -1 && (ret = url);
                    }), ret;
                }(el.href, src);
                isUrlRequest(url) && !0 !== el.visited && url && (updateCss(el, url), loaded = !0);
            }), loaded;
        }(src);
        if (options.locals) {
            console.log("[HMR] Detected local CSS Modules. Reload all CSS"), reloadAll();
            return;
        }
        reloaded ? console.log("[HMR] CSS reload %s", src && src.join(" ")) : (console.log("[HMR] Reload all CSS"), reloadAll());
    }, timeout = 0, function() {
        for(var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        let self = this;
        clearTimeout(timeout), timeout = setTimeout(function() {
            return fn.apply(self, args);
        }, 50);
    };
}
for(var __webpack_i__ in exports.cssReload = __nested_webpack_exports__.cssReload, exports.normalizeUrl = __nested_webpack_exports__.normalizeUrl, __nested_webpack_exports__)-1 === [
    "cssReload",
    "normalizeUrl"
].indexOf(__webpack_i__) && (exports[__webpack_i__] = __nested_webpack_exports__[__webpack_i__]);
Object.defineProperty(exports, "__esModule", ({
    value: !0
}));


}),
"./node_modules/.pnpm/@rsbuild+core@1.3.22/node_modules/@rsbuild/core/dist/client/hmr.js": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  registerOverlay: () => (registerOverlay)
});
const compilationId = "graphics_moondunk2025";
const hmr_config = {"path":"/rsbuild-hmr","port":3000,"host":"localhost","overlay":true,"reconnect":100};
const resolvedConfig = {"path":"/rsbuild-hmr","port":3000,"host":"localhost","overlay":true,"reconnect":100};
function formatURL(config) {
    const { location } = self;
    const hostname = config.host || location.hostname;
    const port = config.port || location.port;
    const protocol = config.protocol || ('https:' === location.protocol ? 'wss' : 'ws');
    const pathname = config.path || '/rsbuild-hmr';
    if ('undefined' != typeof URL) {
        const url = new URL('http://localhost');
        url.port = String(port);
        url.hostname = hostname;
        url.protocol = protocol;
        url.pathname = pathname;
        url.searchParams.append('compilationId', compilationId);
        return url.toString();
    }
    const colon = -1 === protocol.indexOf(':') ? ':' : '';
    return `${protocol}${colon}//${hostname}:${port}${pathname}`;
}
let isFirstCompilation = true;
let lastCompilationHash = null;
let hasCompileErrors = false;
function clearOutdatedErrors() {
    if (console.clear && hasCompileErrors) console.clear();
}
let createOverlay;
let clearOverlay;
const registerOverlay = (createFn, clearFn)=>{
    createOverlay = createFn;
    clearOverlay = clearFn;
};
function handleSuccess() {
    clearOutdatedErrors();
    const isHotUpdate = !isFirstCompilation;
    isFirstCompilation = false;
    hasCompileErrors = false;
    if (isHotUpdate) tryApplyUpdates();
}
function handleWarnings(param) {
    let { text } = param;
    clearOutdatedErrors();
    const isHotUpdate = !isFirstCompilation;
    isFirstCompilation = false;
    hasCompileErrors = false;
    for(let i = 0; i < text.length; i++){
        if (5 === i) {
            console.warn('There were more warnings in other files, you can find a complete log in the terminal.');
            break;
        }
        console.warn(text[i]);
    }
    if (isHotUpdate) tryApplyUpdates();
}
function handleErrors(param) {
    let { text, html } = param;
    clearOutdatedErrors();
    isFirstCompilation = false;
    hasCompileErrors = true;
    for (const error of text)console.error(error);
    if (createOverlay) createOverlay(html);
}
const isUpdateAvailable = ()=>lastCompilationHash !== __webpack_require__.h();
const handleApplyUpdates = (err, updatedModules)=>{
    const forcedReload = err || !updatedModules;
    if (forcedReload) {
        if (err) console.error('[HMR] Forced reload caused by: ', err);
        reloadPage();
        return;
    }
    if (isUpdateAvailable()) tryApplyUpdates();
};
function tryApplyUpdates() {
    if (!isUpdateAvailable()) return;
    if (true) {
        if ('idle' !== module.hot.status()) return;
        module.hot.check(true).then((updatedModules)=>handleApplyUpdates(null, updatedModules), (err)=>handleApplyUpdates(err, null));
        return;
    }
    reloadPage();
}
let connection = null;
let reconnectCount = 0;
function onOpen() {
    console.info('[HMR] connected.');
}
function onMessage(e) {
    const message = JSON.parse(e.data);
    if (message.compilationId && message.compilationId !== compilationId) return;
    switch(message.type){
        case 'hash':
            lastCompilationHash = message.data;
            if (clearOverlay && isUpdateAvailable()) clearOverlay();
            break;
        case 'ok':
            handleSuccess();
            break;
        case 'static-changed':
        case 'content-changed':
            reloadPage();
            break;
        case 'warnings':
            handleWarnings(message.data);
            break;
        case 'errors':
            handleErrors(message.data);
            break;
    }
}
function onClose() {
    if (reconnectCount >= hmr_config.reconnect) {
        if (hmr_config.reconnect > 0) console.info('[HMR] connection failure after maximum reconnect limit exceeded.');
        return;
    }
    console.info('[HMR] disconnected. Attempting to reconnect.');
    removeListeners();
    connection = null;
    reconnectCount++;
    setTimeout(connect, 1000 * 1.5 ** reconnectCount);
}
function onError() {
    if (formatURL(hmr_config) !== formatURL(resolvedConfig)) {
        console.error('[HMR] WebSocket connection error, attempting direct fallback.');
        removeListeners();
        connection = null;
        connect(true);
    }
}
function connect() {
    let fallback = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : false;
    const socketUrl = formatURL(fallback ? resolvedConfig : hmr_config);
    connection = new WebSocket(socketUrl);
    connection.addEventListener('open', onOpen);
    connection.addEventListener('close', onClose);
    connection.addEventListener('message', onMessage);
    if (!fallback) connection.addEventListener('error', onError);
}
function removeListeners() {
    if (connection) {
        connection.removeEventListener('open', onOpen);
        connection.removeEventListener('close', onClose);
        connection.removeEventListener('message', onMessage);
        connection.removeEventListener('error', onError);
    }
}
function reloadPage() {
    if (true) window.location.reload();
}
connect();



}),
"./node_modules/.pnpm/@rsbuild+core@1.3.22/node_modules/@rsbuild/core/dist/client/overlay.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
/* ESM import */var _hmr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/.pnpm/@rsbuild+core@1.3.22/node_modules/@rsbuild/core/dist/client/hmr.js");

function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
const { HTMLElement = class {
}, customElements } = 'undefined' != typeof window ? window : globalThis;
class ErrorOverlay extends HTMLElement {
    constructor(html){
        var _this;
        var _root_querySelector, _root_querySelector1;
        super(), _this = this, _define_property(this, "close", function() {
            let immediate = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : false;
            const remove = ()=>{
                var _this_parentNode;
                return null == (_this_parentNode = _this.parentNode) ? void 0 : _this_parentNode.removeChild(_this);
            };
            if (_this.animate && true !== immediate) _this.animate([
                {
                    opacity: 1
                },
                {
                    opacity: 0
                }
            ], {
                duration: 300,
                easing: 'ease-out'
            }).addEventListener('finish', remove);
            else remove();
        });
        if (!this.attachShadow) return void console.warn('[Rsbuild] Current browser version does not support displaying error overlay');
        const root = this.attachShadow({
            mode: 'open'
        });
        root.innerHTML = html;
        null == (_root_querySelector = root.querySelector('.close')) || _root_querySelector.addEventListener('click', this.close);
        this.addEventListener('click', this.close);
        null == (_root_querySelector1 = root.querySelector('.container')) || _root_querySelector1.addEventListener('click', (e)=>{
            if (e.target) {
                const { file } = e.target.dataset;
                if (file) fetch(`/__open-in-editor?file=${encodeURIComponent(file)}`);
            }
            e.stopPropagation();
        });
        const onEscKeydown = (e)=>{
            if ('Escape' === e.key || 'Escape' === e.code) this.close();
            document.removeEventListener('keydown', onEscKeydown);
        };
        document.addEventListener('keydown', onEscKeydown);
    }
}
const overlayId = 'rsbuild-error-overlay';
if (customElements && !customElements.get(overlayId)) customElements.define(overlayId, ErrorOverlay);
function createOverlay(html) {
    clearOverlay();
    document.body.appendChild(new ErrorOverlay(html));
}
function clearOverlay() {
    document.querySelectorAll(overlayId).forEach((n)=>n.close(true));
}
if ('undefined' != typeof document) (0, _hmr__WEBPACK_IMPORTED_MODULE_0__.registerOverlay)(createOverlay, clearOverlay);
else console.info('[Rsbuild] Failed to display error overlay as document is not available, you can disable the `dev.client.overlay` option.');


}),
"./node_modules/.pnpm/klona@2.0.6/node_modules/klona/json/index.mjs": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  klona: () => (klona)
});
function klona(val) {
	var k, out, tmp;

	if (Array.isArray(val)) {
		out = Array(k=val.length);
		while (k--) out[k] = (tmp=val[k]) && typeof tmp === 'object' ? klona(tmp) : tmp;
		return out;
	}

	if (Object.prototype.toString.call(val) === '[object Object]') {
		out = {}; // null
		for (k in val) {
			if (k === '__proto__') {
				Object.defineProperty(out, k, {
					value: klona(val[k]),
					configurable: true,
					enumerable: true,
					writable: true,
				});
			} else {
				out[k] = (tmp=val[k]) && typeof tmp === 'object' ? klona(tmp) : tmp;
			}
		}
		return out;
	}

	return val;
}


}),

}]);
//# sourceMappingURL=vendors-node_modules_pnpm_nodecg_react-hooks_1_0_3__types_express_5_0_3_reflect-metadata_0_2_-e1691a.js.map